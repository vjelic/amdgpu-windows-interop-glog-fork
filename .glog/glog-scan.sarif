{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-374f8c9b-df5d-478d-815e-981fc94f22af",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ecdac810-fd68-4684-9235-132620983dfc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b2048ddd-221b-4932-98c0-1c091716205d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6690a75f-659e-4887-8d3f-8fd8679ec59b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cb31fc55-4241-4fbf-b406-aba490962e51",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-efdc1f36-7784-445e-9d50-974a8c1b4130",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-11dea02d-9e95-4238-9aca-cfb5deb323ea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-38755072-a1f0-4a08-b794-d978b60ff39d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5cc21632-aff8-4c93-a9c9-c8516daf172e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f9b412af-b891-410a-a488-496273ddbad5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b07c2d52-acc7-4033-900d-18d7f6023eb0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1d6e6a02-6dd7-4751-8b36-975f58fd3677",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-1ffd2580-d6bd-47e5-8be4-284f06f2d11b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e21cf19f-d4f1-4194-8512-28d4f118ba7e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-ec0e26b8-1259-4f1d-b8fc-8668ddbf2f6a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8b92a43b-fef6-4c73-8b7c-86dae3a332c0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-97ff4f0f-156e-4a86-8834-a2b3ee26f188",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f9691946-2c8b-4870-95b6-97bb50ad449b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6de69a7c-8372-40fa-b4bc-2e4955b374f8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-418b1578-47c0-4816-8a45-529f3848a923",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-f6f0260b-b830-40c2-8e89-01f9061635de",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-6c0fdbd3-907f-4a9c-883b-3588626646fb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-f04fa0bc-57bb-466c-ac7d-b97f6eb880fc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-24901ecc-e346-4008-8942-1794d785c67d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f4d4e0a5-7123-46db-852d-65c464f111cc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5f572c8a-dc0d-4294-9ee1-cb7e97aebaf4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b1114212-79f2-4b38-88ae-8879c308d2af",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-89a47eae-e88b-4686-97bd-ced1d5190bc1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-31469622-7a31-48be-ac19-3b3ea098a372",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-0a38518d-ce24-47e3-8f95-ae5c2ccf1c92",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ace3f436-ff83-4cd9-b27f-f52a3606df34",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS117838"
                ]
              }
            },
            {
              "id": "glog-a7563427-b03f-4c42-a414-258505a855cc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e0047017-b04a-4c0c-b2cb-a2e8869c6db7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-b465f65d-1e60-4742-ab69-aea2f9fd0f0e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-970ec7d2-b1d7-44ed-95ad-06a6155d4f4e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-80e8b531-4a63-4e65-862a-ea71de16380c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-6aa43745-a499-4ab5-a016-ef7e8de57680",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e040ff17-bac9-428e-9ab2-320a45d27e06",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cd735e1c-668b-4e4b-9b72-6d1b41c844a2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-955ceda7-099b-43bd-8533-c770caf78d0d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-90fa3112-4467-4e1d-b218-1186eeccd8b3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8ad8118a-2b09-4bc2-9fa4-9c9b386c1322",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-a04d0d0e-c576-4857-985a-3b4639549546",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-4296316b-c1d7-4ff2-a3b3-8e7a0704fb3d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3f06bc6a-1380-4f5f-acb7-6a8a9d268710",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2c008584-5d3e-4ff2-b69d-0948a5e5daf0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c210b287-f06d-4c0f-8c0d-fefdd19f955e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-ca2dd1cb-360f-424e-b5e7-89410de04730",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-78caac06-c4ec-4ba8-9df2-a260849c1c36",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5e98fbed-572d-496f-9558-b804b7d7d848",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-16ce7cc9-52a9-4cc7-b268-de7d8a349349",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3adf57ee-93ea-431b-ad1b-6baad5f7a92e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-89f57285-9eb7-43c8-9346-272f725701e4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-87c02fb5-0029-453b-ad1c-ca5ed86c6db6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-25ec3b7b-60b5-471b-99cf-a2eaba413b28",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-8336cff2-9d37-4783-b336-3860ef84170f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-2ab90a94-65ad-45f0-9aeb-94124f195dd6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-1f43f591-8e9e-4a59-9935-3cd1bacf3385",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-b5e3c29e-da4f-45ca-a566-58293b620c5c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-92125898-c723-4117-acd4-0eda0455882a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-badbce3b-d68e-4e7d-b468-32e0f2869134",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b3b50934-9552-4da7-ba2b-fd19bdfbe75d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d77dd7d7-286c-44b6-830d-997706006897",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-d6b19b6b-fead-4010-a603-ff00ebd6e58e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-dbcc6f41-4e54-479e-9ab8-d2a9629f5f09",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS117838"
                ]
              }
            },
            {
              "id": "glog-6c4ac60a-30b2-4283-b9c3-971c0531c977",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4b04e079-b546-48b7-be6a-dd1cf7d5482a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a302780d-9f08-4013-9e28-5701ba835ebe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-578488f5-0065-41ce-8281-777b965d449f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-d41b7c29-8a9c-4322-9d65-22b1cd3b558e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-b3cec551-611f-4117-85e5-a42408bf49bb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-b1b40abb-4806-4337-96b6-b1b39ee02b25",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e7382202-755d-493a-8085-68ad05376671",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8b6b709b-df60-4f8e-8800-896981b65a19",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-26517ce5-901a-4be7-80ee-0548f227ade7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-77f26c86-1841-4899-8b1f-c9d4ac7ff78c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-66f29749-2bae-4982-952e-79d90f7f7087",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1c90f126-9785-40bb-9e50-b95f195e3f5d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-74bbb099-3f56-4363-ba12-cb2f6413aef3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f7f99e4a-0b35-4974-a6b0-4d530da9007b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b0d4e15c-0348-4b43-ad9e-fecc974f3eb1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-1d89f740-1f40-4269-a934-c11b20194838",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-40047e0e-2206-4f2e-8aae-f6156e18c34d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d7884fc8-937d-4017-80ab-3f9f2e426cd8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-52edd122-e279-4687-8ea7-701cdbf614b0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-34013101-b182-4997-b1ee-b001cc3f7ab3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3ce940d4-9e17-4dfd-82f6-5cf7388be87d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ad2dd9a0-083b-4734-8ab6-7026db45088f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-49e9747d-30ea-4467-bbc4-61d07c38f1dd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-020b1cdd-62f0-4003-aa06-6ff4edbc535c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-eb04b177-a199-4a04-8183-768c83183da9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-1f679566-049e-4e64-961b-d45f70294ae3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-35066fcf-290f-4c67-8e4c-4e0a918f2bc6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c1569ade-4634-4439-8c6f-d401701e8449",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-92d19504-f6fa-438a-8f45-5a7319be331a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-758d7560-de96-40a5-900a-b54888d32e05",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-31fc8516-95ad-48fa-9c99-b286a2c88292",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-07c72fd8-380d-4f08-a642-74251a52ff8a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-311a1ad9-5c1b-4706-803d-c964b8230b72",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-0cbfb653-5d3b-43f7-be6f-bc9ccfc645e2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-acb7ce82-6cf9-44ba-9571-e1829860fbc9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cb8fe619-0bee-4aeb-8cec-323e1796b9f8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-169d45de-f628-4022-8f94-01e597e6ae5a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-e2884cb5-acda-4880-b808-b9fba6f16ed1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5c19432b-84f7-44f0-afc5-f010a4aca7e3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-84797cf1-f2a0-403d-90fa-05839eb1cef5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-65bc47b0-232a-4513-9d4a-d56c805a9707",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d22c4ff3-6e0b-470e-b479-e00625a9691c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-5c2afcaf-fa27-4be5-b917-9e5b3966adaf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-12f4876a-a990-449c-ab5f-5862305fa6cc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-0730485c-f097-48ef-85b6-d6bc8450942b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-659b0cb7-b201-4d58-8bc0-dac50ea9bb65",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-31f0843f-e579-4182-9f1c-1c9b9ecd9d17",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fcbf9d0b-c88a-4347-8334-a7635795b909",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-dd0c9801-bea2-452b-a47e-a63f7e38d0c4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS108330"
                ]
              }
            },
            {
              "id": "glog-037380d9-aa95-4759-86ff-3cb3efdc6782",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-1214ed98-ea59-4cc1-b78c-50961ac36b1c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-615a0b8e-5265-41d9-b5f2-7b46506b1e8b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-6564d29b-b3d0-4e6f-8377-561d2160dfa6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-1c895691-d2f9-49c3-aa6b-4f11f59a1b16",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-5e2e77f9-d8e3-433c-82e7-a2bbd6039c8e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-e25c18a1-426a-4368-b95f-6b0d15e5441b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-17ad1ca8-1605-4e47-a085-ce621386dad4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5dc60ffd-e068-41d0-b908-80612f132d59",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-f5c0fb0f-2944-4d08-a8eb-38306afdfc2f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1ce1ed59-359d-4422-8753-080f3c12c22d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b9f2cd2a-9d46-4f7f-b022-130dc31f0487",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-cf3a181d-da20-42f2-897d-5990f9fcddc8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-319f2f4e-4235-4435-a53f-616b40cbf16b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ad362eb7-c234-4cf6-9810-58eb975d6bd4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-eaf0ad88-26b2-42ab-9694-d6578c01bddf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-0cd1538b-9920-4ac3-b1c5-cd3ceb7b5bb5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-8d32509f-279d-4cf4-827a-3b411f4f8183",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-990ec8f1-0fed-4d3f-a77c-bdf0dfd1b482",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-787847c8-8495-4502-b6a6-e35e539b8689",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-052473f3-d401-4f3d-9835-e4f00528ae3d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-964df945-0f89-40ad-8340-9ae87192db95",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8cc320b5-ad7e-4bf0-8604-079c3945f197",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-073e96f3-5ffb-4c93-a3cd-0c770e702733",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-890e465c-fc4e-4379-812f-de7bfb241f86",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-7b5910b4-cd4c-44f5-8647-37d2662eea77",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS117838"
                ]
              }
            },
            {
              "id": "glog-c6d18aa0-4c42-4e1d-9bfd-92fea6badb36",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-39238b70-e24c-4adc-9be8-d1c0f9e66054",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-fd49945d-c61d-45e3-a60d-0b367b8b0e6c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d7030985-0fde-4a79-823c-a8eee2e0f1a4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-6f885b0b-8e26-46dc-ab22-06c11ec9cc2e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-64615537-5809-4231-a3f5-bf35ee9a61ca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-12d382e6-297d-45ca-a3f1-a63b12df610d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-f39b632e-66b4-4552-a5a1-db4f9c1e91cb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-74543601-ec41-4529-aacc-f113a1f96bab",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6f2092dc-27c4-493d-8513-ad3b85d74504",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-adfa3978-69dd-4091-b910-771a841bc267",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5a3ff2a0-cbfb-47f0-ada9-5716890970f2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-3087f34a-0365-487a-b6c3-ed0fb9b83e26",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c1276422-625e-410d-a535-9a803d0948d4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e180129d-cac8-4644-b043-3d79580ca9d5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-1062d401-a213-4b98-bba1-605e55e4dfba",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bc2895fc-dadc-482d-bdf1-0a29dc2bff85",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-92ebadee-b457-49bf-8531-43c7caa6ff16",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-b1807eda-33bb-40c2-abc2-8e64299d649f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2e216a77-b8df-40e2-bc98-d6d93d9cbc94",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-c36aa33d-c1ee-4982-9325-92961694ecda",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-286851dc-6028-4847-bfb0-873ec37d06aa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-80f70a5c-1e92-4848-a01a-03b0062108dc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-58227eee-691f-4f5d-8cf2-571868c67911",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-dd8fa69d-92fa-4e7d-b4da-cfc0edff8b96",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-24a4d491-ed00-4445-9e74-6f8a32c36217",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c52b4480-e5da-4618-ad61-3b00510eac0d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-a9632755-1923-4635-be37-8b5cf4b26208",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-cd8ba384-d983-405f-99c6-044ac33f8486",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ab19d5f6-12bc-441f-a7b7-5f4a4e52fa35",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8a03ba2f-8490-47f4-beb4-fc8de68f19f8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-13a6a238-aff0-4378-9ef6-c84048b8c05e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6f99674d-82f6-4132-8559-d098f5a4bead",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-3ab63f78-16b1-4f6d-84ea-b0a90174c478",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-12cbfafd-9116-48c0-8f50-e32070901e79",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c014c329-df91-4b63-904d-eb1ab82bc092",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-d5343ddf-1094-423b-854a-053ca424cf3a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-72fa4c72-fe9b-4c67-a393-5b1dbff967a4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-b2677435-74b6-4dd9-9644-2947a7f68b35",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS108330"
                ]
              }
            },
            {
              "id": "glog-bdc890ec-9324-4dbb-962b-e5f314b474e6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-9f8278ec-c1ad-4125-8566-fbe2d9abcfbb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-88c1087b-1497-4c60-8941-2a92ec885270",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-6a52d76c-38c0-47f4-aad9-b342529122fa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9b276d11-0b5e-464a-9a97-c2686967bedb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9c358735-3114-4b1d-bc1c-65a1bf0dc1b2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9258ea9c-84af-4d2b-890f-73abaa285c8c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-813ec0d2-878d-45f9-b8d1-cb1395202eb4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-467cae00-3497-424b-bd2f-515c67719f4a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-6b6301bc-f9ba-4614-828a-ae4f0eb67a81",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-211a7bc4-e4bb-4bef-9ee3-26b01f3cc1fb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3e8ee22a-80d1-4880-a4ed-b9b6918be97c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-add3e22d-0f46-40d6-816e-f04bc4b1898b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-18dece9e-3f90-4a6d-9cad-454ba0c7aaaa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4a068afb-07b9-4bfc-976d-abe9aa0b0913",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fa89525d-a16c-4590-a0d1-d208f22cbcfa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e844d2c1-3bfb-4c15-8098-9a28b2fc0d36",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-87139833-6e0b-4c7d-ae0e-d947e19f8c2c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-98345a7c-a2d4-4f9e-8238-bfd3bb9b0468",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-09ac4ed6-2f8b-4f11-928b-03b172990dc5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS108330"
                ]
              }
            },
            {
              "id": "glog-35a1f0b5-c1a8-4f68-9d51-f80284238b55",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-7c20da69-9fa3-4514-a157-aaf56ce6a316",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-c0e9cdd8-f53e-4367-a2c2-5744760a79c2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-68b5db18-3686-4146-ada6-3f6d96f92517",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fe3c0f78-5a55-4c63-b1b2-18f7f26945c0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8dc6443e-13fa-4e94-95b3-29ffe93f7cb0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-558d7626-4043-409c-ba8d-279973451f55",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c67ba312-6acc-4e4d-8162-43015ba825cd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-883397fb-aaa1-4aea-b05c-8b8eacdd2975",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 917,
                  "startColumn": 8,
                  "endLine": 917,
                  "endColumn": 50,
                  "charOffset": 36853,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(svalue, version.c_str(), (std::min)",
                    "rendered": {
                      "text": "memcpy(svalue, version.c_str(), (std::min)",
                      "markdown": "`memcpy(svalue, version.c_str(), (std::min)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36853,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(svalue, <size of svalue>,  version.c_str(),  (std::min)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ecbb64b7-2150-4188-99dc-facca2b9acf3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 6,
                  "endLine": 863,
                  "endColumn": 69,
                  "charOffset": 34685,
                  "charLength": 63,
                  "snippet": {
                    "text": "memcpy(desc->producer_name, producer.c_str(), producer.length()",
                    "rendered": {
                      "text": "memcpy(desc->producer_name, producer.c_str(), producer.length()",
                      "markdown": "`memcpy(desc->producer_name, producer.c_str(), producer.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 34685,
                        "charLength": 63
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->producer_name, <size of desc->producer_name>,  producer.c_str(),  producer.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-374f8c9b-df5d-478d-815e-981fc94f22af",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 882,
                  "startColumn": 6,
                  "endLine": 882,
                  "endColumn": 70,
                  "charOffset": 35550,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(desc->producer_options, options.c_str(), options.length()",
                    "rendered": {
                      "text": "memcpy(desc->producer_options, options.c_str(), options.length()",
                      "markdown": "`memcpy(desc->producer_options, options.c_str(), options.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35550,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->producer_options, <size of desc->producer_options>,  options.c_str(),  options.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ecdac810-fd68-4684-9235-132620983dfc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 8,
                  "endLine": 927,
                  "endColumn": 46,
                  "charOffset": 37284,
                  "charLength": 38,
                  "snippet": {
                    "text": "memcpy(svalue, isa.c_str(), (std::min)",
                    "rendered": {
                      "text": "memcpy(svalue, isa.c_str(), (std::min)",
                      "markdown": "`memcpy(svalue, isa.c_str(), (std::min)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 37284,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "memcpy_s(svalue, <size of svalue>,  isa.c_str(),  (std::min)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b2048ddd-221b-4932-98c0-1c091716205d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 6,
                  "endLine": 541,
                  "endColumn": 127,
                  "charOffset": 17819,
                  "charLength": 121,
                  "snippet": {
                    "text": "memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()",
                    "rendered": {
                      "text": "memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()",
                      "markdown": "`memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17819,
                        "charLength": 121
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->vendor_and_architecture_name + desc->vendor_name_size, <size of desc->vendor_and_architecture_name + desc->vendor_name_size>,  architecture_name.c_str(),  architecture_name.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6690a75f-659e-4887-8d3f-8fd8679ec59b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 10,
                  "endLine": 148,
                  "endColumn": 61,
                  "charOffset": 4717,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(value, ModuleName.c_str(), ModuleName.size()",
                    "rendered": {
                      "text": "memcpy(value, ModuleName.c_str(), ModuleName.size()",
                      "markdown": "`memcpy(value, ModuleName.c_str(), ModuleName.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4717,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  ModuleName.c_str(),  ModuleName.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cb31fc55-4241-4fbf-b406-aba490962e51",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 10,
                  "endLine": 138,
                  "endColumn": 61,
                  "charOffset": 4337,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(value, SymbolName.c_str(), SymbolName.size()",
                    "rendered": {
                      "text": "memcpy(value, SymbolName.c_str(), SymbolName.size()",
                      "markdown": "`memcpy(value, SymbolName.c_str(), SymbolName.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4337,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  SymbolName.c_str(),  SymbolName.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-efdc1f36-7784-445e-9d50-974a8c1b4130",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 6,
                  "endLine": 540,
                  "endColumn": 90,
                  "charOffset": 17722,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()",
                    "rendered": {
                      "text": "memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()",
                      "markdown": "`memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17722,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->vendor_and_architecture_name, <size of desc->vendor_and_architecture_name>,  vendor_name.c_str(),  vendor_name.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-11dea02d-9e95-4238-9aca-cfb5deb323ea",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/loader/loaders.cpp"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 4,
                  "endLine": 213,
                  "endColumn": 44,
                  "charOffset": 6729,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy((char *) dst + offset, src, size)",
                    "rendered": {
                      "text": "memcpy((char *) dst + offset, src, size)",
                      "markdown": "`memcpy((char *) dst + offset, src, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/loader/loaders.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6729,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s((char *) dst + offset, <size of (char *) dst + offset>,  src,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-38755072-a1f0-4a08-b794-d978b60ff39d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/loader/executable.cpp"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 6,
                  "endLine": 476,
                  "endColumn": 59,
                  "charOffset": 15235,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(value, module_name.c_str(), module_name.size()",
                    "rendered": {
                      "text": "memcpy(value, module_name.c_str(), module_name.size()",
                      "markdown": "`memcpy(value, module_name.c_str(), module_name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/loader/executable.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15235,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  module_name.c_str(),  module_name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5cc21632-aff8-4c93-a9c9-c8516daf172e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/loader/executable.cpp"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 6,
                  "endLine": 467,
                  "endColumn": 59,
                  "charOffset": 14944,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(value, symbol_name.c_str(), symbol_name.size()",
                    "rendered": {
                      "text": "memcpy(value, symbol_name.c_str(), symbol_name.size()",
                      "markdown": "`memcpy(value, symbol_name.c_str(), symbol_name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/loader/executable.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14944,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  symbol_name.c_str(),  symbol_name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f9b412af-b891-410a-a488-496273ddbad5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1536,
                  "startColumn": 8,
                  "endLine": 1536,
                  "endColumn": 40,
                  "charOffset": 54707,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(*buf, buffer, bufferSize)",
                    "rendered": {
                      "text": "memcpy(*buf, buffer, bufferSize)",
                      "markdown": "`memcpy(*buf, buffer, bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54707,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(*buf, <size of *buf>,  buffer,  bufferSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b07c2d52-acc7-4033-900d-18d7f6023eb0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1548,
                  "startColumn": 8,
                  "endLine": 1548,
                  "endColumn": 39,
                  "charOffset": 55012,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(buf, buffer, bufferSize)",
                    "rendered": {
                      "text": "memcpy(buf, buffer, bufferSize)",
                      "markdown": "`memcpy(buf, buffer, bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 55012,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buf, <size of buf>,  buffer,  bufferSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1d6e6a02-6dd7-4751-8b36-975f58fd3677",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1535,
                  "startColumn": 15,
                  "endLine": 1535,
                  "endColumn": 33,
                  "charOffset": 54679,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(bufferSize)",
                    "rendered": {
                      "text": "malloc(bufferSize)",
                      "markdown": "`malloc(bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54679,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1ffd2580-d6bd-47e5-8be4-284f06f2d11b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 998,
                  "startColumn": 10,
                  "endLine": 998,
                  "endColumn": 76,
                  "charOffset": 37537,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)",
                    "rendered": {
                      "text": "memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)",
                      "markdown": "`memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 37537,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  (const char*) edata->d_buf + offset - coffset,  csize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e21cf19f-d4f1-4194-8512-28d4f118ba7e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 22,
                  "endLine": 266,
                  "endColumn": 35,
                  "charOffset": 8119,
                  "charLength": 13,
                  "snippet": {
                    "text": "malloc(size1)",
                    "rendered": {
                      "text": "malloc(size1)",
                      "markdown": "`malloc(size1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8119,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ec0e26b8-1259-4f1d-b8fc-8668ddbf2f6a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 4,
                  "endLine": 175,
                  "endColumn": 22,
                  "charOffset": 5745,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5745,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8b92a43b-fef6-4c73-8b7c-86dae3a332c0",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 257,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 257,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-97ff4f0f-156e-4a86-8834-a2b3ee26f188",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 4,
                  "endLine": 99,
                  "endColumn": 22,
                  "charOffset": 3269,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3269,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f9691946-2c8b-4870-95b6-97bb50ad449b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 4,
                  "endLine": 416,
                  "endColumn": 22,
                  "charOffset": 14782,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14782,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6de69a7c-8372-40fa-b4bc-2e4955b374f8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 4,
                  "endLine": 338,
                  "endColumn": 22,
                  "charOffset": 12127,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12127,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-418b1578-47c0-4816-8a45-529f3848a923",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 79,
                  "endLine": 256,
                  "endColumn": 112,
                  "charOffset": 9344,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9344,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9344,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f6f0260b-b830-40c2-8e89-01f9061635de",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 79,
                  "endLine": 251,
                  "endColumn": 112,
                  "charOffset": 9105,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9105,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9105,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6c0fdbd3-907f-4a9c-883b-3588626646fb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 28,
                  "endLine": 244,
                  "endColumn": 61,
                  "charOffset": 8817,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8817,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8817,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f04fa0bc-57bb-466c-ac7d-b97f6eb880fc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 28,
                  "endLine": 241,
                  "endColumn": 61,
                  "charOffset": 8671,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8671,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8671,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-24901ecc-e346-4008-8942-1794d785c67d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 4,
                  "endLine": 231,
                  "endColumn": 23,
                  "charOffset": 8423,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(hash, v, 16)",
                    "rendered": {
                      "text": "memcpy(hash, v, 16)",
                      "markdown": "`memcpy(hash, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8423,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f4d4e0a5-7123-46db-852d-65c464f111cc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 39,
                  "charOffset": 3656,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(input.b, ptr, end - ptr)",
                    "rendered": {
                      "text": "memcpy(input.b, ptr, end - ptr)",
                      "markdown": "`memcpy(input.b, ptr, end - ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3656,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b, <size of input.b>,  ptr,  end - ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5f572c8a-dc0d-4294-9ee1-cb7e97aebaf4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 4,
                  "endLine": 158,
                  "endColumn": 29,
                  "charOffset": 5932,
                  "charLength": 25,
                  "snippet": {
                    "text": "memcpy(hash, state.v, 16)",
                    "rendered": {
                      "text": "memcpy(hash, state.v, 16)",
                      "markdown": "`memcpy(hash, state.v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5932,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  state.v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b1114212-79f2-4b38-88ae-8879c308d2af",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 8,
                  "endLine": 71,
                  "endColumn": 69,
                  "charOffset": 2327,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                    "rendered": {
                      "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                      "markdown": "`memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2327,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b + (bytes % 32), <size of input.b + (bytes % 32)>,  ptr,  static_cast<size_t>(fill)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-89a47eae-e88b-4686-97bd-ced1d5190bc1",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 41,
                  "endLine": 26,
                  "endColumn": 106,
                  "charOffset": 836,
                  "charLength": 65,
                  "snippet": {
                    "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                    "rendered": {
                      "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                      "markdown": "`\"012345678901234567890123456789012345678901234567890123456789012\"`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-31469622-7a31-48be-ac19-3b3ea098a372",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 254,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 254,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-0a38518d-ce24-47e3-8f95-ae5c2ccf1c92",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 4,
                  "endLine": 412,
                  "endColumn": 25,
                  "charOffset": 12773,
                  "charLength": 21,
                  "snippet": {
                    "text": "memcpy(out, &hash, 8)",
                    "rendered": {
                      "text": "memcpy(out, &hash, 8)",
                      "markdown": "`memcpy(out, &hash, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12773,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  &hash,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ace3f436-ff83-4cd9-b27f-f52a3606df34",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/testvector.h"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 25,
                  "endLine": 38,
                  "endColumn": 98,
                  "charOffset": 1148,
                  "charLength": 73,
                  "snippet": {
                    "text": "key_63 = \"012345678901234567890123456789012345678901234567890123456789012",
                    "rendered": {
                      "text": "key_63 = \"012345678901234567890123456789012345678901234567890123456789012",
                      "markdown": "`key_63 = \"012345678901234567890123456789012345678901234567890123456789012`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-a7563427-b03f-4c42-a414-258505a855cc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 4,
                  "endLine": 335,
                  "endColumn": 25,
                  "charOffset": 10513,
                  "charLength": 21,
                  "snippet": {
                    "text": "memcpy(out, &hash, 8)",
                    "rendered": {
                      "text": "memcpy(out, &hash, 8)",
                      "markdown": "`memcpy(out, &hash, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10513,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  &hash,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e0047017-b04a-4c0c-b2cb-a2e8869c6db7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 78,
                  "endLine": 253,
                  "endColumn": 110,
                  "charOffset": 8126,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8126,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8126,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b465f65d-1e60-4742-ab69-aea2f9fd0f0e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 78,
                  "endLine": 248,
                  "endColumn": 110,
                  "charOffset": 7891,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7891,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7891,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-970ec7d2-b1d7-44ed-95ad-06a6155d4f4e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 27,
                  "endLine": 241,
                  "endColumn": 59,
                  "charOffset": 7608,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7608,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7608,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-80e8b531-4a63-4e65-862a-ea71de16380c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 27,
                  "endLine": 238,
                  "endColumn": 59,
                  "charOffset": 7466,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6aa43745-a499-4ab5-a016-ef7e8de57680",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/loader/loaders.cpp"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 4,
                  "endLine": 213,
                  "endColumn": 44,
                  "charOffset": 6729,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy((char *) dst + offset, src, size)",
                    "rendered": {
                      "text": "memcpy((char *) dst + offset, src, size)",
                      "markdown": "`memcpy((char *) dst + offset, src, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/loader/loaders.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6729,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s((char *) dst + offset, <size of (char *) dst + offset>,  src,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e040ff17-bac9-428e-9ab2-320a45d27e06",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 4,
                  "endLine": 228,
                  "endColumn": 23,
                  "charOffset": 7222,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(hash, &h, 8)",
                    "rendered": {
                      "text": "memcpy(hash, &h, 8)",
                      "markdown": "`memcpy(hash, &h, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7222,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  &h,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cd735e1c-668b-4e4b-9b72-6d1b41c844a2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 8,
                  "endLine": 94,
                  "endColumn": 59,
                  "charOffset": 3199,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(input.b, ptr, static_cast<size_t>(end - ptr)",
                    "rendered": {
                      "text": "memcpy(input.b, ptr, static_cast<size_t>(end - ptr)",
                      "markdown": "`memcpy(input.b, ptr, static_cast<size_t>(end - ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3199,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b, <size of input.b>,  ptr,  static_cast<size_t>(end - ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-955ceda7-099b-43bd-8533-c770caf78d0d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 4,
                  "endLine": 156,
                  "endColumn": 28,
                  "charOffset": 5180,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(hash, state.v, 8)",
                    "rendered": {
                      "text": "memcpy(hash, state.v, 8)",
                      "markdown": "`memcpy(hash, state.v, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5180,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  state.v,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-90fa3112-4467-4e1d-b218-1186eeccd8b3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 8,
                  "endLine": 67,
                  "endColumn": 69,
                  "charOffset": 1849,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                    "rendered": {
                      "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                      "markdown": "`memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1849,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b + (bytes % 32), <size of input.b + (bytes % 32)>,  ptr,  static_cast<size_t>(fill)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8ad8118a-2b09-4bc2-9fa4-9c9b386c1322",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 40,
                  "endLine": 27,
                  "endColumn": 105,
                  "charOffset": 833,
                  "charLength": 65,
                  "snippet": {
                    "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                    "rendered": {
                      "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                      "markdown": "`\"012345678901234567890123456789012345678901234567890123456789012\"`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-a04d0d0e-c576-4857-985a-3b4639549546",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 253,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 253,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-4296316b-c1d7-4ff2-a3b3-8e7a0704fb3d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 4,
                  "endLine": 51,
                  "endColumn": 33,
                  "charOffset": 1340,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1340,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3f06bc6a-1380-4f5f-acb7-6a8a9d268710",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 44,
                  "endColumn": 33,
                  "charOffset": 1186,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1186,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2c008584-5d3e-4ff2-b69d-0948a5e5daf0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 33,
                  "charOffset": 1055,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1055,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c210b287-f06d-4c0f-8c0d-fefdd19f955e",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 248,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 248,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-ca2dd1cb-360f-424e-b5e7-89410de04730",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/loader/executable.cpp"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 6,
                  "endLine": 476,
                  "endColumn": 59,
                  "charOffset": 15235,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(value, module_name.c_str(), module_name.size()",
                    "rendered": {
                      "text": "memcpy(value, module_name.c_str(), module_name.size()",
                      "markdown": "`memcpy(value, module_name.c_str(), module_name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/loader/executable.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15235,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  module_name.c_str(),  module_name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-78caac06-c4ec-4ba8-9df2-a260849c1c36",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/sc/HSAIL/ext/loader/executable.cpp"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 6,
                  "endLine": 467,
                  "endColumn": 59,
                  "charOffset": 14944,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(value, symbol_name.c_str(), symbol_name.size()",
                    "rendered": {
                      "text": "memcpy(value, symbol_name.c_str(), symbol_name.size()",
                      "markdown": "`memcpy(value, symbol_name.c_str(), symbol_name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/sc/HSAIL/ext/loader/executable.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14944,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  symbol_name.c_str(),  symbol_name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5e98fbed-572d-496f-9558-b804b7d7d848",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 4,
                  "endLine": 175,
                  "endColumn": 22,
                  "charOffset": 5745,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5745,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-16ce7cc9-52a9-4cc7-b268-de7d8a349349",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 4,
                  "endLine": 416,
                  "endColumn": 22,
                  "charOffset": 14782,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14782,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3adf57ee-93ea-431b-ad1b-6baad5f7a92e",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 257,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 257,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-89f57285-9eb7-43c8-9346-272f725701e4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 4,
                  "endLine": 99,
                  "endColumn": 22,
                  "charOffset": 3269,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3269,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-87c02fb5-0029-453b-ad1c-ca5ed86c6db6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 4,
                  "endLine": 338,
                  "endColumn": 22,
                  "charOffset": 12127,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12127,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-25ec3b7b-60b5-471b-99cf-a2eaba413b28",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 79,
                  "endLine": 251,
                  "endColumn": 112,
                  "charOffset": 9105,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9105,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9105,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8336cff2-9d37-4783-b336-3860ef84170f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 79,
                  "endLine": 256,
                  "endColumn": 112,
                  "charOffset": 9344,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9344,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9344,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2ab90a94-65ad-45f0-9aeb-94124f195dd6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 28,
                  "endLine": 244,
                  "endColumn": 61,
                  "charOffset": 8817,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8817,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8817,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1f43f591-8e9e-4a59-9935-3cd1bacf3385",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 28,
                  "endLine": 241,
                  "endColumn": 61,
                  "charOffset": 8671,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8671,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8671,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b5e3c29e-da4f-45ca-a566-58293b620c5c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 4,
                  "endLine": 158,
                  "endColumn": 29,
                  "charOffset": 5932,
                  "charLength": 25,
                  "snippet": {
                    "text": "memcpy(hash, state.v, 16)",
                    "rendered": {
                      "text": "memcpy(hash, state.v, 16)",
                      "markdown": "`memcpy(hash, state.v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5932,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  state.v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-92125898-c723-4117-acd4-0eda0455882a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 4,
                  "endLine": 231,
                  "endColumn": 23,
                  "charOffset": 8423,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(hash, v, 16)",
                    "rendered": {
                      "text": "memcpy(hash, v, 16)",
                      "markdown": "`memcpy(hash, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8423,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-badbce3b-d68e-4e7d-b468-32e0f2869134",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 39,
                  "charOffset": 3656,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(input.b, ptr, end - ptr)",
                    "rendered": {
                      "text": "memcpy(input.b, ptr, end - ptr)",
                      "markdown": "`memcpy(input.b, ptr, end - ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3656,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b, <size of input.b>,  ptr,  end - ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b3b50934-9552-4da7-ba2b-fd19bdfbe75d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 8,
                  "endLine": 71,
                  "endColumn": 69,
                  "charOffset": 2327,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                    "rendered": {
                      "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                      "markdown": "`memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2327,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b + (bytes % 32), <size of input.b + (bytes % 32)>,  ptr,  static_cast<size_t>(fill)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d77dd7d7-286c-44b6-830d-997706006897",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 254,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 254,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-d6b19b6b-fead-4010-a603-ff00ebd6e58e",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 41,
                  "endLine": 26,
                  "endColumn": 106,
                  "charOffset": 836,
                  "charLength": 65,
                  "snippet": {
                    "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                    "rendered": {
                      "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                      "markdown": "`\"012345678901234567890123456789012345678901234567890123456789012\"`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-dbcc6f41-4e54-479e-9ab8-d2a9629f5f09",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/testvector.h"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 25,
                  "endLine": 38,
                  "endColumn": 98,
                  "charOffset": 1148,
                  "charLength": 73,
                  "snippet": {
                    "text": "key_63 = \"012345678901234567890123456789012345678901234567890123456789012",
                    "rendered": {
                      "text": "key_63 = \"012345678901234567890123456789012345678901234567890123456789012",
                      "markdown": "`key_63 = \"012345678901234567890123456789012345678901234567890123456789012`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-6c4ac60a-30b2-4283-b9c3-971c0531c977",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 4,
                  "endLine": 412,
                  "endColumn": 25,
                  "charOffset": 12773,
                  "charLength": 21,
                  "snippet": {
                    "text": "memcpy(out, &hash, 8)",
                    "rendered": {
                      "text": "memcpy(out, &hash, 8)",
                      "markdown": "`memcpy(out, &hash, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12773,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  &hash,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4b04e079-b546-48b7-be6a-dd1cf7d5482a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 4,
                  "endLine": 335,
                  "endColumn": 25,
                  "charOffset": 10513,
                  "charLength": 21,
                  "snippet": {
                    "text": "memcpy(out, &hash, 8)",
                    "rendered": {
                      "text": "memcpy(out, &hash, 8)",
                      "markdown": "`memcpy(out, &hash, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10513,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  &hash,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a302780d-9f08-4013-9e28-5701ba835ebe",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 78,
                  "endLine": 253,
                  "endColumn": 110,
                  "charOffset": 8126,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8126,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8126,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-578488f5-0065-41ce-8281-777b965d449f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 78,
                  "endLine": 248,
                  "endColumn": 110,
                  "charOffset": 7891,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7891,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7891,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d41b7c29-8a9c-4322-9d65-22b1cd3b558e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 27,
                  "endLine": 241,
                  "endColumn": 59,
                  "charOffset": 7608,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7608,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7608,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b3cec551-611f-4117-85e5-a42408bf49bb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 27,
                  "endLine": 238,
                  "endColumn": 59,
                  "charOffset": 7466,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b1b40abb-4806-4337-96b6-b1b39ee02b25",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 4,
                  "endLine": 228,
                  "endColumn": 23,
                  "charOffset": 7222,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(hash, &h, 8)",
                    "rendered": {
                      "text": "memcpy(hash, &h, 8)",
                      "markdown": "`memcpy(hash, &h, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7222,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  &h,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e7382202-755d-493a-8085-68ad05376671",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 4,
                  "endLine": 156,
                  "endColumn": 28,
                  "charOffset": 5180,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(hash, state.v, 8)",
                    "rendered": {
                      "text": "memcpy(hash, state.v, 8)",
                      "markdown": "`memcpy(hash, state.v, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5180,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  state.v,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8b6b709b-df60-4f8e-8800-896981b65a19",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 8,
                  "endLine": 94,
                  "endColumn": 59,
                  "charOffset": 3199,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(input.b, ptr, static_cast<size_t>(end - ptr)",
                    "rendered": {
                      "text": "memcpy(input.b, ptr, static_cast<size_t>(end - ptr)",
                      "markdown": "`memcpy(input.b, ptr, static_cast<size_t>(end - ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3199,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b, <size of input.b>,  ptr,  static_cast<size_t>(end - ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-26517ce5-901a-4be7-80ee-0548f227ade7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 8,
                  "endLine": 67,
                  "endColumn": 69,
                  "charOffset": 1849,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                    "rendered": {
                      "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                      "markdown": "`memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1849,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b + (bytes % 32), <size of input.b + (bytes % 32)>,  ptr,  static_cast<size_t>(fill)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-77f26c86-1841-4899-8b1f-c9d4ac7ff78c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 40,
                  "endLine": 27,
                  "endColumn": 105,
                  "charOffset": 833,
                  "charLength": 65,
                  "snippet": {
                    "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                    "rendered": {
                      "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                      "markdown": "`\"012345678901234567890123456789012345678901234567890123456789012\"`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-66f29749-2bae-4982-952e-79d90f7f7087",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 4,
                  "endLine": 51,
                  "endColumn": 33,
                  "charOffset": 1340,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1340,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1c90f126-9785-40bb-9e50-b95f195e3f5d",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 253,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 253,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-74bbb099-3f56-4363-ba12-cb2f6413aef3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 44,
                  "endColumn": 33,
                  "charOffset": 1186,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1186,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f7f99e4a-0b35-4974-a6b0-4d530da9007b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 33,
                  "charOffset": 1055,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1055,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b0d4e15c-0348-4b43-ad9e-fecc974f3eb1",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 248,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 248,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-1d89f740-1f40-4269-a934-c11b20194838",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 917,
                  "startColumn": 8,
                  "endLine": 917,
                  "endColumn": 50,
                  "charOffset": 36853,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(svalue, version.c_str(), (std::min)",
                    "rendered": {
                      "text": "memcpy(svalue, version.c_str(), (std::min)",
                      "markdown": "`memcpy(svalue, version.c_str(), (std::min)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36853,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(svalue, <size of svalue>,  version.c_str(),  (std::min)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-40047e0e-2206-4f2e-8aae-f6156e18c34d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 8,
                  "endLine": 927,
                  "endColumn": 46,
                  "charOffset": 37284,
                  "charLength": 38,
                  "snippet": {
                    "text": "memcpy(svalue, isa.c_str(), (std::min)",
                    "rendered": {
                      "text": "memcpy(svalue, isa.c_str(), (std::min)",
                      "markdown": "`memcpy(svalue, isa.c_str(), (std::min)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 37284,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "memcpy_s(svalue, <size of svalue>,  isa.c_str(),  (std::min)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d7884fc8-937d-4017-80ab-3f9f2e426cd8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 882,
                  "startColumn": 6,
                  "endLine": 882,
                  "endColumn": 70,
                  "charOffset": 35550,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(desc->producer_options, options.c_str(), options.length()",
                    "rendered": {
                      "text": "memcpy(desc->producer_options, options.c_str(), options.length()",
                      "markdown": "`memcpy(desc->producer_options, options.c_str(), options.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35550,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->producer_options, <size of desc->producer_options>,  options.c_str(),  options.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-52edd122-e279-4687-8ea7-701cdbf614b0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 6,
                  "endLine": 863,
                  "endColumn": 69,
                  "charOffset": 34685,
                  "charLength": 63,
                  "snippet": {
                    "text": "memcpy(desc->producer_name, producer.c_str(), producer.length()",
                    "rendered": {
                      "text": "memcpy(desc->producer_name, producer.c_str(), producer.length()",
                      "markdown": "`memcpy(desc->producer_name, producer.c_str(), producer.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 34685,
                        "charLength": 63
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->producer_name, <size of desc->producer_name>,  producer.c_str(),  producer.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-34013101-b182-4997-b1ee-b001cc3f7ab3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 6,
                  "endLine": 541,
                  "endColumn": 127,
                  "charOffset": 17819,
                  "charLength": 121,
                  "snippet": {
                    "text": "memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()",
                    "rendered": {
                      "text": "memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()",
                      "markdown": "`memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17819,
                        "charLength": 121
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->vendor_and_architecture_name + desc->vendor_name_size, <size of desc->vendor_and_architecture_name + desc->vendor_name_size>,  architecture_name.c_str(),  architecture_name.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3ce940d4-9e17-4dfd-82f6-5cf7388be87d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 6,
                  "endLine": 540,
                  "endColumn": 90,
                  "charOffset": 17722,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()",
                    "rendered": {
                      "text": "memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()",
                      "markdown": "`memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17722,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->vendor_and_architecture_name, <size of desc->vendor_and_architecture_name>,  vendor_name.c_str(),  vendor_name.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ad2dd9a0-083b-4734-8ab6-7026db45088f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 10,
                  "endLine": 148,
                  "endColumn": 61,
                  "charOffset": 4717,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(value, ModuleName.c_str(), ModuleName.size()",
                    "rendered": {
                      "text": "memcpy(value, ModuleName.c_str(), ModuleName.size()",
                      "markdown": "`memcpy(value, ModuleName.c_str(), ModuleName.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4717,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  ModuleName.c_str(),  ModuleName.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-49e9747d-30ea-4467-bbc4-61d07c38f1dd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 10,
                  "endLine": 138,
                  "endColumn": 61,
                  "charOffset": 4337,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(value, SymbolName.c_str(), SymbolName.size()",
                    "rendered": {
                      "text": "memcpy(value, SymbolName.c_str(), SymbolName.size()",
                      "markdown": "`memcpy(value, SymbolName.c_str(), SymbolName.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4337,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  SymbolName.c_str(),  SymbolName.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-020b1cdd-62f0-4003-aa06-6ff4edbc535c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 602,
                  "startColumn": 27,
                  "endLine": 602,
                  "endColumn": 38,
                  "charOffset": 19995,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19995,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19995,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-eb04b177-a199-4a04-8183-768c83183da9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 28,
                  "endLine": 595,
                  "endColumn": 40,
                  "charOffset": 19837,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pStr)",
                    "rendered": {
                      "text": "strlen(pStr)",
                      "markdown": "`strlen(pStr)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19837,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pStr, <size of pStr>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19837,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pStr, <size of pStr>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1f679566-049e-4e64-961b-d45f70294ae3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 25,
                  "endLine": 365,
                  "endColumn": 91,
                  "charOffset": 12962,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12962,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(pData), <size of reinterpret_cast<void*>(pData)>,  m_pData,  m_size * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-35066fcf-290f-4c67-8e4c-4e0a918f2bc6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 16,
                  "endLine": 145,
                  "endColumn": 57,
                  "charOffset": 5315,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(&m_pData[oldSize], pTs, (sizeof(T)",
                    "rendered": {
                      "text": "memcpy(&m_pData[oldSize], pTs, (sizeof(T)",
                      "markdown": "`memcpy(&m_pData[oldSize], pTs, (sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5315,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&m_pData[oldSize], <size of &m_pData[oldSize]>,  pTs,  (sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c1569ade-4634-4439-8c6f-d401701e8449",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1548,
                  "startColumn": 8,
                  "endLine": 1548,
                  "endColumn": 39,
                  "charOffset": 55012,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(buf, buffer, bufferSize)",
                    "rendered": {
                      "text": "memcpy(buf, buffer, bufferSize)",
                      "markdown": "`memcpy(buf, buffer, bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 55012,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buf, <size of buf>,  buffer,  bufferSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-92d19504-f6fa-438a-8f45-5a7319be331a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1536,
                  "startColumn": 8,
                  "endLine": 1536,
                  "endColumn": 40,
                  "charOffset": 54707,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(*buf, buffer, bufferSize)",
                    "rendered": {
                      "text": "memcpy(*buf, buffer, bufferSize)",
                      "markdown": "`memcpy(*buf, buffer, bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54707,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(*buf, <size of *buf>,  buffer,  bufferSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-758d7560-de96-40a5-900a-b54888d32e05",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1535,
                  "startColumn": 15,
                  "endLine": 1535,
                  "endColumn": 33,
                  "charOffset": 54679,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(bufferSize)",
                    "rendered": {
                      "text": "malloc(bufferSize)",
                      "markdown": "`malloc(bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54679,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-31fc8516-95ad-48fa-9c99-b286a2c88292",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 998,
                  "startColumn": 10,
                  "endLine": 998,
                  "endColumn": 76,
                  "charOffset": 37537,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)",
                    "rendered": {
                      "text": "memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)",
                      "markdown": "`memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 37537,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  (const char*) edata->d_buf + offset - coffset,  csize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-07c72fd8-380d-4f08-a642-74251a52ff8a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 22,
                  "endLine": 266,
                  "endColumn": 35,
                  "charOffset": 8119,
                  "charLength": 13,
                  "snippet": {
                    "text": "malloc(size1)",
                    "rendered": {
                      "text": "malloc(size1)",
                      "markdown": "`malloc(size1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8119,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-311a1ad9-5c1b-4706-803d-c964b8230b72",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 64,
                  "endLine": 82,
                  "endColumn": 79,
                  "charOffset": 2872,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(pString)",
                    "rendered": {
                      "text": "strlen(pString)",
                      "markdown": "`strlen(pString)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2872,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2872,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0cbfb653-5d3b-43f7-be6f-bc9ccfc645e2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 33,
                  "endLine": 86,
                  "endColumn": 47,
                  "charOffset": 3250,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(m_data)",
                    "rendered": {
                      "text": "strlen(m_data)",
                      "markdown": "`strlen(m_data)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3250,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(m_data, <size of m_data>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3250,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(m_data, <size of m_data>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-acb7ce82-6cf9-44ba-9571-e1829860fbc9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palVector.h"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 17,
                  "endLine": 432,
                  "endColumn": 58,
                  "charOffset": 18721,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(m_pData, vector.m_pData, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(m_pData, vector.m_pData, sizeof(T)",
                      "markdown": "`memcpy(m_pData, vector.m_pData, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palVector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18721,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_pData, <size of m_pData>,  vector.m_pData,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cb8fe619-0bee-4aeb-8cec-323e1796b9f8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 80,
                  "endLine": 57,
                  "endColumn": 92,
                  "charOffset": 2424,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pKey)",
                    "rendered": {
                      "text": "strlen(pKey)",
                      "markdown": "`strlen(pKey)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pKey, <size of pKey>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pKey, <size of pKey>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-169d45de-f628-4022-8f94-01e597e6ae5a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palStringUtil.h"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 27,
                  "endLine": 158,
                  "endColumn": 42,
                  "charOffset": 6353,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(pString)",
                    "rendered": {
                      "text": "strlen(pString)",
                      "markdown": "`strlen(pString)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palStringUtil.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6353,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palStringUtil.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6353,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e2884cb5-acda-4880-b808-b9fba6f16ed1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 4,
                  "endLine": 611,
                  "endColumn": 55,
                  "charOffset": 24051,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(pNumEntries, &numEntries, sizeof(numEntries)",
                    "rendered": {
                      "text": "memcpy(pNumEntries, &numEntries, sizeof(numEntries)",
                      "markdown": "`memcpy(pNumEntries, &numEntries, sizeof(numEntries)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24051,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(pNumEntries, <size of pNumEntries>,  &numEntries,  sizeof(numEntries)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5c19432b-84f7-44f0-afc5-f010a4aca7e3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 4,
                  "endLine": 647,
                  "endColumn": 55,
                  "charOffset": 25390,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)",
                    "rendered": {
                      "text": "memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)",
                      "markdown": "`memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25390,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ppNextGroup, <size of ppNextGroup>,  &pNextGroup,  sizeof(pNextGroup)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-84797cf1-f2a0-403d-90fa-05839eb1cef5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 4,
                  "endLine": 629,
                  "endColumn": 55,
                  "charOffset": 24712,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)",
                    "rendered": {
                      "text": "memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)",
                      "markdown": "`memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24712,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&pNextGroup, <size of &pNextGroup>,  ppNextGroup,  sizeof(pNextGroup)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-65bc47b0-232a-4513-9d4a-d56c805a9707",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 4,
                  "endLine": 593,
                  "endColumn": 55,
                  "charOffset": 23372,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(&numEntries, pNumEntries, sizeof(numEntries)",
                    "rendered": {
                      "text": "memcpy(&numEntries, pNumEntries, sizeof(numEntries)",
                      "markdown": "`memcpy(&numEntries, pNumEntries, sizeof(numEntries)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23372,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&numEntries, <size of &numEntries>,  pNumEntries,  sizeof(numEntries)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d22c4ff3-6e0b-470e-b479-e00625a9691c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 33,
                  "endLine": 175,
                  "endColumn": 44,
                  "charOffset": 8328,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(key)",
                    "rendered": {
                      "text": "strlen(key)",
                      "markdown": "`strlen(key)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8328,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(key, <size of key>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8328,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(key, <size of key>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5c2afcaf-fa27-4be5-b917-9e5b3966adaf",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 15,
                  "endLine": 66,
                  "endColumn": 38,
                  "charOffset": 3056,
                  "charLength": 23,
                  "snippet": {
                    "text": "http://burtleburtle.net",
                    "rendered": {
                      "text": "http://burtleburtle.net",
                      "markdown": "`http://burtleburtle.net`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3056,
                        "charLength": 23
                      },
                      "insertedContent": {
                        "text": "https://burtleburtle.net"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-12f4876a-a990-449c-ab5f-5862305fa6cc",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/core/inc/ddcPlatform.h"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 4,
                  "endLine": 517,
                  "endColumn": 11,
                  "charOffset": 17349,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-0730485c-f097-48ef-85b6-d6bc8450942b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/loader/loaders.cpp"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 4,
                  "endLine": 213,
                  "endColumn": 44,
                  "charOffset": 6729,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy((char *) dst + offset, src, size)",
                    "rendered": {
                      "text": "memcpy((char *) dst + offset, src, size)",
                      "markdown": "`memcpy((char *) dst + offset, src, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/loader/loaders.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6729,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s((char *) dst + offset, <size of (char *) dst + offset>,  src,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-659b0cb7-b201-4d58-8bc0-dac50ea9bb65",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/loader/executable.cpp"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 6,
                  "endLine": 476,
                  "endColumn": 59,
                  "charOffset": 15235,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(value, module_name.c_str(), module_name.size()",
                    "rendered": {
                      "text": "memcpy(value, module_name.c_str(), module_name.size()",
                      "markdown": "`memcpy(value, module_name.c_str(), module_name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/loader/executable.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15235,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  module_name.c_str(),  module_name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-31f0843f-e579-4182-9f1c-1c9b9ecd9d17",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/sc/HSAIL/ext/loader/executable.cpp"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 6,
                  "endLine": 467,
                  "endColumn": 59,
                  "charOffset": 14944,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(value, symbol_name.c_str(), symbol_name.size()",
                    "rendered": {
                      "text": "memcpy(value, symbol_name.c_str(), symbol_name.size()",
                      "markdown": "`memcpy(value, symbol_name.c_str(), symbol_name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/sc/HSAIL/ext/loader/executable.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14944,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  symbol_name.c_str(),  symbol_name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fcbf9d0b-c88a-4347-8334-a7635795b909",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 23,
                  "endLine": 1072,
                  "endColumn": 40,
                  "charOffset": 35538,
                  "charLength": 17,
                  "snippet": {
                    "text": "strlen(pStrValue)",
                    "rendered": {
                      "text": "strlen(pStrValue)",
                      "markdown": "`strlen(pStrValue)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35538,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strlen_s(pStrValue, <size of pStrValue>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35538,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strnlen(pStrValue, <size of pStrValue>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dd0c9801-bea2-452b-a47e-a63f7e38d0c4",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 968,
                  "startColumn": 4,
                  "endLine": 968,
                  "endColumn": 50,
                  "charOffset": 31580,
                  "charLength": 46,
                  "snippet": {
                    "text": "strncat(pDst, pSrc, (sizeDst - dstLength - 1))",
                    "rendered": {
                      "text": "strncat(pDst, pSrc, (sizeDst - dstLength - 1))",
                      "markdown": "`strncat(pDst, pSrc, (sizeDst - dstLength - 1))`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncat adds the null terminator at character 'n + 1', rather than at the nth character. this frequently leads to the null terminator being added in the memory adjacent to the destination buffer, rather than in the destination buffer."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 31580,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "strcat_s(pDst,  (sizeDst - dstLength - 1,  pSrc)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncat adds the null terminator at character 'n + 1', rather than at the nth character. this frequently leads to the null terminator being added in the memory adjacent to the destination buffer, rather than in the destination buffer."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 31580,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "strlcat(pDst,  pSrc,  (sizeDst - dstLength - 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-037380d9-aa95-4759-86ff-3cb3efdc6782",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 29,
                  "endLine": 967,
                  "endColumn": 41,
                  "charOffset": 31562,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pDst)",
                    "rendered": {
                      "text": "strlen(pDst)",
                      "markdown": "`strlen(pDst)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 31562,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pDst, <size of pDst>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 31562,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pDst, <size of pDst>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1214ed98-ea59-4cc1-b78c-50961ac36b1c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 918,
                  "startColumn": 8,
                  "endLine": 918,
                  "endColumn": 42,
                  "charOffset": 29902,
                  "charLength": 34,
                  "snippet": {
                    "text": "strncpy(pDst, pSrc, (dstSize - 1))",
                    "rendered": {
                      "text": "strncpy(pDst, pSrc, (dstSize - 1))",
                      "markdown": "`strncpy(pDst, pSrc, (dstSize - 1))`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29902,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strcpy_s(pDst,  (dstSize - 1,  pSrc)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29902,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strlcpy(pDst,  pSrc,  (dstSize - 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-615a0b8e-5265-41d9-b5f2-7b46506b1e8b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 910,
                  "startColumn": 14,
                  "endLine": 910,
                  "endColumn": 26,
                  "charOffset": 29664,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pSrc)",
                    "rendered": {
                      "text": "strlen(pSrc)",
                      "markdown": "`strlen(pSrc)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29664,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pSrc, <size of pSrc>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29664,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pSrc, <size of pSrc>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6564d29b-b3d0-4e6f-8377-561d2160dfa6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 602,
                  "startColumn": 27,
                  "endLine": 602,
                  "endColumn": 38,
                  "charOffset": 19995,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19995,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19995,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1c895691-d2f9-49c3-aa6b-4f11f59a1b16",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 28,
                  "endLine": 595,
                  "endColumn": 40,
                  "charOffset": 19837,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pStr)",
                    "rendered": {
                      "text": "strlen(pStr)",
                      "markdown": "`strlen(pStr)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19837,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pStr, <size of pStr>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19837,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pStr, <size of pStr>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5e2e77f9-d8e3-433c-82e7-a2bbd6039c8e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 64,
                  "endLine": 82,
                  "endColumn": 79,
                  "charOffset": 2872,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(pString)",
                    "rendered": {
                      "text": "strlen(pString)",
                      "markdown": "`strlen(pString)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2872,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2872,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e25c18a1-426a-4368-b95f-6b0d15e5441b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 25,
                  "endLine": 365,
                  "endColumn": 91,
                  "charOffset": 12962,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12962,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(pData), <size of reinterpret_cast<void*>(pData)>,  m_pData,  m_size * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-17ad1ca8-1605-4e47-a085-ce621386dad4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 16,
                  "endLine": 145,
                  "endColumn": 57,
                  "charOffset": 5315,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(&m_pData[oldSize], pTs, (sizeof(T)",
                    "rendered": {
                      "text": "memcpy(&m_pData[oldSize], pTs, (sizeof(T)",
                      "markdown": "`memcpy(&m_pData[oldSize], pTs, (sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5315,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&m_pData[oldSize], <size of &m_pData[oldSize]>,  pTs,  (sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5dc60ffd-e068-41d0-b908-80612f132d59",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 33,
                  "endLine": 86,
                  "endColumn": 47,
                  "charOffset": 3250,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(m_data)",
                    "rendered": {
                      "text": "strlen(m_data)",
                      "markdown": "`strlen(m_data)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3250,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(m_data, <size of m_data>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3250,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(m_data, <size of m_data>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f5c0fb0f-2944-4d08-a8eb-38306afdfc2f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 4,
                  "endLine": 175,
                  "endColumn": 22,
                  "charOffset": 5745,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5745,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1ce1ed59-359d-4422-8753-080f3c12c22d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 4,
                  "endLine": 99,
                  "endColumn": 22,
                  "charOffset": 3269,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3269,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b9f2cd2a-9d46-4f7f-b022-130dc31f0487",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128crc.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 257,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128crc.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 257,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-cf3a181d-da20-42f2-897d-5990f9fcddc8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 80,
                  "endLine": 57,
                  "endColumn": 92,
                  "charOffset": 2424,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pKey)",
                    "rendered": {
                      "text": "strlen(pKey)",
                      "markdown": "`strlen(pKey)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pKey, <size of pKey>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pKey, <size of pKey>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-319f2f4e-4235-4435-a53f-616b40cbf16b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 4,
                  "endLine": 416,
                  "endColumn": 22,
                  "charOffset": 14782,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14782,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ad362eb7-c234-4cf6-9810-58eb975d6bd4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 4,
                  "endLine": 338,
                  "endColumn": 22,
                  "charOffset": 12127,
                  "charLength": 18,
                  "snippet": {
                    "text": "memcpy(out, v, 16)",
                    "rendered": {
                      "text": "memcpy(out, v, 16)",
                      "markdown": "`memcpy(out, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12127,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-eaf0ad88-26b2-42ab-9694-d6578c01bddf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 79,
                  "endLine": 256,
                  "endColumn": 112,
                  "charOffset": 9344,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9344,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9344,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0cd1538b-9920-4ac3-b1c5-cd3ceb7b5bb5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 79,
                  "endLine": 251,
                  "endColumn": 112,
                  "charOffset": 9105,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9105,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9105,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8d32509f-279d-4cf4-827a-3b411f4f8183",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 28,
                  "endLine": 244,
                  "endColumn": 61,
                  "charOffset": 8817,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8817,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8817,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-990ec8f1-0fed-4d3f-a77c-bdf0dfd1b482",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 4,
                  "endLine": 158,
                  "endColumn": 29,
                  "charOffset": 5932,
                  "charLength": 25,
                  "snippet": {
                    "text": "memcpy(hash, state.v, 16)",
                    "rendered": {
                      "text": "memcpy(hash, state.v, 16)",
                      "markdown": "`memcpy(hash, state.v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5932,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  state.v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-787847c8-8495-4502-b6a6-e35e539b8689",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 28,
                  "endLine": 241,
                  "endColumn": 61,
                  "charOffset": 8671,
                  "charLength": 33,
                  "snippet": {
                    "text": "strlen(MetroHash128::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash128::test_string)",
                      "markdown": "`strlen(MetroHash128::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8671,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8671,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash128::test_string, <size of MetroHash128::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-052473f3-d401-4f3d-9835-e4f00528ae3d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 4,
                  "endLine": 231,
                  "endColumn": 23,
                  "charOffset": 8423,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(hash, v, 16)",
                    "rendered": {
                      "text": "memcpy(hash, v, 16)",
                      "markdown": "`memcpy(hash, v, 16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8423,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  v,  16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-964df945-0f89-40ad-8340-9ae87192db95",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 39,
                  "charOffset": 3656,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(input.b, ptr, end - ptr)",
                    "rendered": {
                      "text": "memcpy(input.b, ptr, end - ptr)",
                      "markdown": "`memcpy(input.b, ptr, end - ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3656,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b, <size of input.b>,  ptr,  end - ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8cc320b5-ad7e-4bf0-8604-079c3945f197",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 8,
                  "endLine": 71,
                  "endColumn": 69,
                  "charOffset": 2327,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                    "rendered": {
                      "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                      "markdown": "`memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2327,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b + (bytes % 32), <size of input.b + (bytes % 32)>,  ptr,  static_cast<size_t>(fill)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-073e96f3-5ffb-4c93-a3cd-0c770e702733",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 41,
                  "endLine": 26,
                  "endColumn": 106,
                  "charOffset": 836,
                  "charLength": 65,
                  "snippet": {
                    "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                    "rendered": {
                      "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                      "markdown": "`\"012345678901234567890123456789012345678901234567890123456789012\"`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-890e465c-fc4e-4379-812f-de7bfb241f86",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 254,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash128.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 254,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-7b5910b4-cd4c-44f5-8647-37d2662eea77",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/testvector.h"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 25,
                  "endLine": 38,
                  "endColumn": 98,
                  "charOffset": 1148,
                  "charLength": 73,
                  "snippet": {
                    "text": "key_63 = \"012345678901234567890123456789012345678901234567890123456789012",
                    "rendered": {
                      "text": "key_63 = \"012345678901234567890123456789012345678901234567890123456789012",
                      "markdown": "`key_63 = \"012345678901234567890123456789012345678901234567890123456789012`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-c6d18aa0-4c42-4e1d-9bfd-92fea6badb36",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 4,
                  "endLine": 412,
                  "endColumn": 25,
                  "charOffset": 12773,
                  "charLength": 21,
                  "snippet": {
                    "text": "memcpy(out, &hash, 8)",
                    "rendered": {
                      "text": "memcpy(out, &hash, 8)",
                      "markdown": "`memcpy(out, &hash, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12773,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  &hash,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-39238b70-e24c-4adc-9be8-d1c0f9e66054",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 78,
                  "endLine": 248,
                  "endColumn": 110,
                  "charOffset": 7891,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7891,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7891,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fd49945d-c61d-45e3-a60d-0b367b8b0e6c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 4,
                  "endLine": 335,
                  "endColumn": 25,
                  "charOffset": 10513,
                  "charLength": 21,
                  "snippet": {
                    "text": "memcpy(out, &hash, 8)",
                    "rendered": {
                      "text": "memcpy(out, &hash, 8)",
                      "markdown": "`memcpy(out, &hash, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10513,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  &hash,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d7030985-0fde-4a79-823c-a8eee2e0f1a4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 78,
                  "endLine": 253,
                  "endColumn": 110,
                  "charOffset": 8126,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8126,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8126,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6f885b0b-8e26-46dc-ab22-06c11ec9cc2e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 27,
                  "endLine": 241,
                  "endColumn": 59,
                  "charOffset": 7608,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7608,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7608,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-64615537-5809-4231-a3f5-bf35ee9a61ca",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 4,
                  "endLine": 228,
                  "endColumn": 23,
                  "charOffset": 7222,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(hash, &h, 8)",
                    "rendered": {
                      "text": "memcpy(hash, &h, 8)",
                      "markdown": "`memcpy(hash, &h, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7222,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  &h,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-12d382e6-297d-45ca-a3f1-a63b12df610d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 27,
                  "endLine": 238,
                  "endColumn": 59,
                  "charOffset": 7466,
                  "charLength": 32,
                  "snippet": {
                    "text": "strlen(MetroHash64::test_string)",
                    "rendered": {
                      "text": "strlen(MetroHash64::test_string)",
                      "markdown": "`strlen(MetroHash64::test_string)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strlen_s(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "strnlen(MetroHash64::test_string, <size of MetroHash64::test_string>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f39b632e-66b4-4552-a5a1-db4f9c1e91cb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 4,
                  "endLine": 156,
                  "endColumn": 28,
                  "charOffset": 5180,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(hash, state.v, 8)",
                    "rendered": {
                      "text": "memcpy(hash, state.v, 8)",
                      "markdown": "`memcpy(hash, state.v, 8)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5180,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(hash, <size of hash>,  state.v,  8)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-74543601-ec41-4529-aacc-f113a1f96bab",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 8,
                  "endLine": 94,
                  "endColumn": 59,
                  "charOffset": 3199,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(input.b, ptr, static_cast<size_t>(end - ptr)",
                    "rendered": {
                      "text": "memcpy(input.b, ptr, static_cast<size_t>(end - ptr)",
                      "markdown": "`memcpy(input.b, ptr, static_cast<size_t>(end - ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3199,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b, <size of input.b>,  ptr,  static_cast<size_t>(end - ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6f2092dc-27c4-493d-8513-ad3b85d74504",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 40,
                  "endLine": 27,
                  "endColumn": 105,
                  "charOffset": 833,
                  "charLength": 65,
                  "snippet": {
                    "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                    "rendered": {
                      "text": "\"012345678901234567890123456789012345678901234567890123456789012\"",
                      "markdown": "`\"012345678901234567890123456789012345678901234567890123456789012\"`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-adfa3978-69dd-4091-b910-771a841bc267",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 8,
                  "endLine": 67,
                  "endColumn": 69,
                  "charOffset": 1849,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                    "rendered": {
                      "text": "memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)",
                      "markdown": "`memcpy(input.b + (bytes % 32), ptr, static_cast<size_t>(fill)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1849,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input.b + (bytes % 32), <size of input.b + (bytes % 32)>,  ptr,  static_cast<size_t>(fill)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5a3ff2a0-cbfb-47f0-ada9-5716890970f2",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 253,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/metrohash64.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 253,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-3087f34a-0365-487a-b6c3-ed0fb9b83e26",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 4,
                  "endLine": 51,
                  "endColumn": 33,
                  "charOffset": 1340,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1340,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c1276422-625e-410d-a535-9a803d0948d4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 44,
                  "endColumn": 33,
                  "charOffset": 1186,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1186,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e180129d-cac8-4644-b043-3d79580ca9d5",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/core/inc/ddcPlatform.h"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 4,
                  "endLine": 504,
                  "endColumn": 11,
                  "charOffset": 17092,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-1062d401-a213-4b98-bba1-605e55e4dfba",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 33,
                  "charOffset": 1055,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&val, ptr, sizeof(val)",
                    "rendered": {
                      "text": "memcpy(&val, ptr, sizeof(val)",
                      "markdown": "`memcpy(&val, ptr, sizeof(val)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1055,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&val, <size of &val>,  ptr,  sizeof(val)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bc2895fc-dadc-482d-bdf1-0a29dc2bff85",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/metrohash/src/platform.h"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 28,
                  "charOffset": 248,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.apache.org",
                    "rendered": {
                      "text": "http://www.apache.org",
                      "markdown": "`http://www.apache.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/metrohash/src/platform.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 248,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.apache.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-92ebadee-b457-49bf-8531-43c7caa6ff16",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 27,
                  "endLine": 592,
                  "endColumn": 38,
                  "charOffset": 19778,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19778,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19778,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b1807eda-33bb-40c2-abc2-8e64299d649f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 25,
                  "endLine": 363,
                  "endColumn": 91,
                  "charOffset": 12927,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(pData), m_pData, m_size * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12927,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(pData), <size of reinterpret_cast<void*>(pData)>,  m_pData,  m_size * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2e216a77-b8df-40e2-bc98-d6d93d9cbc94",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 28,
                  "endLine": 585,
                  "endColumn": 40,
                  "charOffset": 19620,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pStr)",
                    "rendered": {
                      "text": "strlen(pStr)",
                      "markdown": "`strlen(pStr)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19620,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pStr, <size of pStr>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19620,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pStr, <size of pStr>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c36aa33d-c1ee-4982-9325-92961694ecda",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 16,
                  "endLine": 143,
                  "endColumn": 57,
                  "charOffset": 5280,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(&m_pData[oldSize], pTs, (sizeof(T)",
                    "rendered": {
                      "text": "memcpy(&m_pData[oldSize], pTs, (sizeof(T)",
                      "markdown": "`memcpy(&m_pData[oldSize], pTs, (sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/vector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5280,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&m_pData[oldSize], <size of &m_pData[oldSize]>,  pTs,  (sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-286851dc-6028-4847-bfb0-873ec37d06aa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 64,
                  "endLine": 82,
                  "endColumn": 79,
                  "charOffset": 2872,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(pString)",
                    "rendered": {
                      "text": "strlen(pString)",
                      "markdown": "`strlen(pString)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2872,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/ddMetroHash.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2872,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-80f70a5c-1e92-4848-a01a-03b0062108dc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 33,
                  "endLine": 86,
                  "endColumn": 47,
                  "charOffset": 3250,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(m_data)",
                    "rendered": {
                      "text": "strlen(m_data)",
                      "markdown": "`strlen(m_data)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3250,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(m_data, <size of m_data>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/string.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3250,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(m_data, <size of m_data>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-58227eee-691f-4f5d-8cf2-571868c67911",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 80,
                  "endLine": 57,
                  "endColumn": 92,
                  "charOffset": 2424,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pKey)",
                    "rendered": {
                      "text": "strlen(pKey)",
                      "markdown": "`strlen(pKey)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pKey, <size of pKey>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/util/hashFunc.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pKey, <size of pKey>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dd8fa69d-92fa-4e7d-b4da-cfc0edff8b96",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/core/inc/ddcPlatform.h"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 4,
                  "endLine": 504,
                  "endColumn": 11,
                  "charOffset": 17092,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-24a4d491-ed00-4445-9e74-6f8a32c36217",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palVector.h"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 17,
                  "endLine": 432,
                  "endColumn": 58,
                  "charOffset": 18721,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(m_pData, vector.m_pData, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(m_pData, vector.m_pData, sizeof(T)",
                      "markdown": "`memcpy(m_pData, vector.m_pData, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palVector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18721,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_pData, <size of m_pData>,  vector.m_pData,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c52b4480-e5da-4618-ad61-3b00510eac0d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/shared/devdriver/shared/legacy/inc/gpuopen.h"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 9,
                  "endLine": 458,
                  "endColumn": 18,
                  "charOffset": 27919,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-a9632755-1923-4635-be37-8b5cf4b26208",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palStringUtil.h"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 74,
                  "endLine": 135,
                  "endColumn": 83,
                  "charOffset": 6240,
                  "charLength": 9,
                  "snippet": {
                    "text": "strlen(s)",
                    "rendered": {
                      "text": "strlen(s)",
                      "markdown": "`strlen(s)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palStringUtil.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6240,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "strlen_s(s, <size of s>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palStringUtil.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6240,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "strnlen(s, <size of s>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cd8ba384-d983-405f-99c6-044ac33f8486",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 4,
                  "endLine": 644,
                  "endColumn": 55,
                  "charOffset": 25092,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)",
                    "rendered": {
                      "text": "memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)",
                      "markdown": "`memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25092,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ppNextGroup, <size of ppNextGroup>,  &pNextGroup,  sizeof(pNextGroup)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ab19d5f6-12bc-441f-a7b7-5f4a4e52fa35",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 4,
                  "endLine": 626,
                  "endColumn": 55,
                  "charOffset": 24414,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)",
                    "rendered": {
                      "text": "memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)",
                      "markdown": "`memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24414,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&pNextGroup, <size of &pNextGroup>,  ppNextGroup,  sizeof(pNextGroup)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8a03ba2f-8490-47f4-beb4-fc8de68f19f8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 4,
                  "endLine": 608,
                  "endColumn": 55,
                  "charOffset": 23753,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(pNumEntries, &numEntries, sizeof(numEntries)",
                    "rendered": {
                      "text": "memcpy(pNumEntries, &numEntries, sizeof(numEntries)",
                      "markdown": "`memcpy(pNumEntries, &numEntries, sizeof(numEntries)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23753,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(pNumEntries, <size of pNumEntries>,  &numEntries,  sizeof(numEntries)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-13a6a238-aff0-4378-9ef6-c84048b8c05e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 4,
                  "endLine": 590,
                  "endColumn": 55,
                  "charOffset": 23074,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(&numEntries, pNumEntries, sizeof(numEntries)",
                    "rendered": {
                      "text": "memcpy(&numEntries, pNumEntries, sizeof(numEntries)",
                      "markdown": "`memcpy(&numEntries, pNumEntries, sizeof(numEntries)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23074,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&numEntries, <size of &numEntries>,  pNumEntries,  sizeof(numEntries)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6f99674d-82f6-4132-8559-d098f5a4bead",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 33,
                  "endLine": 175,
                  "endColumn": 44,
                  "charOffset": 8328,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(key)",
                    "rendered": {
                      "text": "strlen(key)",
                      "markdown": "`strlen(key)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8328,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(key, <size of key>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8328,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(key, <size of key>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3ab63f78-16b1-4f6d-84ea-b0a90174c478",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 15,
                  "endLine": 66,
                  "endColumn": 38,
                  "charOffset": 3056,
                  "charLength": 23,
                  "snippet": {
                    "text": "http://burtleburtle.net",
                    "rendered": {
                      "text": "http://burtleburtle.net",
                      "markdown": "`http://burtleburtle.net`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3056,
                        "charLength": 23
                      },
                      "insertedContent": {
                        "text": "https://burtleburtle.net"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-12cbfafd-9116-48c0-8f50-e32070901e79",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palVector.h"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 17,
                  "endLine": 432,
                  "endColumn": 58,
                  "charOffset": 18721,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(m_pData, vector.m_pData, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(m_pData, vector.m_pData, sizeof(T)",
                      "markdown": "`memcpy(m_pData, vector.m_pData, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palVector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18721,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_pData, <size of m_pData>,  vector.m_pData,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c014c329-df91-4b63-904d-eb1ab82bc092",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250515a/pal/shared/devdriver/shared/legacy/inc/gpuopen.h"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 9,
                  "endLine": 458,
                  "endColumn": 18,
                  "charOffset": 27919,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-d5343ddf-1094-423b-854a-053ca424cf3a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palStringUtil.h"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 27,
                  "endLine": 158,
                  "endColumn": 42,
                  "charOffset": 6353,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(pString)",
                    "rendered": {
                      "text": "strlen(pString)",
                      "markdown": "`strlen(pString)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palStringUtil.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6353,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palStringUtil.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6353,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(pString, <size of pString>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-72fa4c72-fe9b-4c67-a393-5b1dbff967a4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 1064,
                  "startColumn": 23,
                  "endLine": 1064,
                  "endColumn": 40,
                  "charOffset": 34892,
                  "charLength": 17,
                  "snippet": {
                    "text": "strlen(pStrValue)",
                    "rendered": {
                      "text": "strlen(pStrValue)",
                      "markdown": "`strlen(pStrValue)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 34892,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strlen_s(pStrValue, <size of pStrValue>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 34892,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strnlen(pStrValue, <size of pStrValue>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b2677435-74b6-4dd9-9644-2947a7f68b35",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 960,
                  "startColumn": 4,
                  "endLine": 960,
                  "endColumn": 50,
                  "charOffset": 30934,
                  "charLength": 46,
                  "snippet": {
                    "text": "strncat(pDst, pSrc, (sizeDst - dstLength - 1))",
                    "rendered": {
                      "text": "strncat(pDst, pSrc, (sizeDst - dstLength - 1))",
                      "markdown": "`strncat(pDst, pSrc, (sizeDst - dstLength - 1))`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncat adds the null terminator at character 'n + 1', rather than at the nth character. this frequently leads to the null terminator being added in the memory adjacent to the destination buffer, rather than in the destination buffer."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30934,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "strcat_s(pDst,  (sizeDst - dstLength - 1,  pSrc)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncat adds the null terminator at character 'n + 1', rather than at the nth character. this frequently leads to the null terminator being added in the memory adjacent to the destination buffer, rather than in the destination buffer."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30934,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "strlcat(pDst,  pSrc,  (sizeDst - dstLength - 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bdc890ec-9324-4dbb-962b-e5f314b474e6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 29,
                  "endLine": 959,
                  "endColumn": 41,
                  "charOffset": 30916,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pDst)",
                    "rendered": {
                      "text": "strlen(pDst)",
                      "markdown": "`strlen(pDst)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30916,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pDst, <size of pDst>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30916,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pDst, <size of pDst>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9f8278ec-c1ad-4125-8566-fbe2d9abcfbb",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 902,
                  "startColumn": 8,
                  "endLine": 902,
                  "endColumn": 42,
                  "charOffset": 29060,
                  "charLength": 34,
                  "snippet": {
                    "text": "strncpy(pDst, pSrc, (dstSize - 1))",
                    "rendered": {
                      "text": "strncpy(pDst, pSrc, (dstSize - 1))",
                      "markdown": "`strncpy(pDst, pSrc, (dstSize - 1))`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29060,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strcpy_s(pDst,  (dstSize - 1,  pSrc)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29060,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strlcpy(pDst,  pSrc,  (dstSize - 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-88c1087b-1497-4c60-8941-2a92ec885270",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 14,
                  "endLine": 894,
                  "endColumn": 26,
                  "charOffset": 28822,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pSrc)",
                    "rendered": {
                      "text": "strlen(pSrc)",
                      "markdown": "`strlen(pSrc)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28822,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pSrc, <size of pSrc>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250414a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28822,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pSrc, <size of pSrc>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6a52d76c-38c0-47f4-aad9-b342529122fa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 4,
                  "endLine": 647,
                  "endColumn": 55,
                  "charOffset": 25390,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)",
                    "rendered": {
                      "text": "memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)",
                      "markdown": "`memcpy(ppNextGroup, &pNextGroup, sizeof(pNextGroup)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25390,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ppNextGroup, <size of ppNextGroup>,  &pNextGroup,  sizeof(pNextGroup)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9b276d11-0b5e-464a-9a97-c2686967bedb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 4,
                  "endLine": 629,
                  "endColumn": 55,
                  "charOffset": 24712,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)",
                    "rendered": {
                      "text": "memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)",
                      "markdown": "`memcpy(&pNextGroup, ppNextGroup, sizeof(pNextGroup)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24712,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&pNextGroup, <size of &pNextGroup>,  ppNextGroup,  sizeof(pNextGroup)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9c358735-3114-4b1d-bc1c-65a1bf0dc1b2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 4,
                  "endLine": 611,
                  "endColumn": 55,
                  "charOffset": 24051,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(pNumEntries, &numEntries, sizeof(numEntries)",
                    "rendered": {
                      "text": "memcpy(pNumEntries, &numEntries, sizeof(numEntries)",
                      "markdown": "`memcpy(pNumEntries, &numEntries, sizeof(numEntries)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24051,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(pNumEntries, <size of pNumEntries>,  &numEntries,  sizeof(numEntries)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9258ea9c-84af-4d2b-890f-73abaa285c8c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 4,
                  "endLine": 593,
                  "endColumn": 55,
                  "charOffset": 23372,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(&numEntries, pNumEntries, sizeof(numEntries)",
                    "rendered": {
                      "text": "memcpy(&numEntries, pNumEntries, sizeof(numEntries)",
                      "markdown": "`memcpy(&numEntries, pNumEntries, sizeof(numEntries)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23372,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&numEntries, <size of &numEntries>,  pNumEntries,  sizeof(numEntries)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-813ec0d2-878d-45f9-b8d1-cb1395202eb4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 33,
                  "endLine": 175,
                  "endColumn": 44,
                  "charOffset": 8328,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(key)",
                    "rendered": {
                      "text": "strlen(key)",
                      "markdown": "`strlen(key)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8328,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(key, <size of key>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8328,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(key, <size of key>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-467cae00-3497-424b-bd2f-515c67719f4a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250414a/pal/shared/devdriver/shared/legacy/inc/gpuopen.h"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 9,
                  "endLine": 458,
                  "endColumn": 18,
                  "charOffset": 27919,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-6b6301bc-f9ba-4614-828a-ae4f0eb67a81",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 15,
                  "endLine": 66,
                  "endColumn": 38,
                  "charOffset": 3056,
                  "charLength": 23,
                  "snippet": {
                    "text": "http://burtleburtle.net",
                    "rendered": {
                      "text": "http://burtleburtle.net",
                      "markdown": "`http://burtleburtle.net`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palHashBaseImpl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3056,
                        "charLength": 23
                      },
                      "insertedContent": {
                        "text": "https://burtleburtle.net"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-211a7bc4-e4bb-4bef-9ee3-26b01f3cc1fb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 8,
                  "endLine": 927,
                  "endColumn": 46,
                  "charOffset": 37284,
                  "charLength": 38,
                  "snippet": {
                    "text": "memcpy(svalue, isa.c_str(), (std::min)",
                    "rendered": {
                      "text": "memcpy(svalue, isa.c_str(), (std::min)",
                      "markdown": "`memcpy(svalue, isa.c_str(), (std::min)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 37284,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "memcpy_s(svalue, <size of svalue>,  isa.c_str(),  (std::min)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3e8ee22a-80d1-4880-a4ed-b9b6918be97c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 882,
                  "startColumn": 6,
                  "endLine": 882,
                  "endColumn": 70,
                  "charOffset": 35550,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(desc->producer_options, options.c_str(), options.length()",
                    "rendered": {
                      "text": "memcpy(desc->producer_options, options.c_str(), options.length()",
                      "markdown": "`memcpy(desc->producer_options, options.c_str(), options.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35550,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->producer_options, <size of desc->producer_options>,  options.c_str(),  options.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-add3e22d-0f46-40d6-816e-f04bc4b1898b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 917,
                  "startColumn": 8,
                  "endLine": 917,
                  "endColumn": 50,
                  "charOffset": 36853,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(svalue, version.c_str(), (std::min)",
                    "rendered": {
                      "text": "memcpy(svalue, version.c_str(), (std::min)",
                      "markdown": "`memcpy(svalue, version.c_str(), (std::min)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36853,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(svalue, <size of svalue>,  version.c_str(),  (std::min)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-18dece9e-3f90-4a6d-9cad-454ba0c7aaaa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 6,
                  "endLine": 863,
                  "endColumn": 69,
                  "charOffset": 34685,
                  "charLength": 63,
                  "snippet": {
                    "text": "memcpy(desc->producer_name, producer.c_str(), producer.length()",
                    "rendered": {
                      "text": "memcpy(desc->producer_name, producer.c_str(), producer.length()",
                      "markdown": "`memcpy(desc->producer_name, producer.c_str(), producer.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 34685,
                        "charLength": 63
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->producer_name, <size of desc->producer_name>,  producer.c_str(),  producer.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4a068afb-07b9-4bfc-976d-abe9aa0b0913",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 6,
                  "endLine": 541,
                  "endColumn": 127,
                  "charOffset": 17819,
                  "charLength": 121,
                  "snippet": {
                    "text": "memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()",
                    "rendered": {
                      "text": "memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()",
                      "markdown": "`memcpy(desc->vendor_and_architecture_name + desc->vendor_name_size, architecture_name.c_str(), architecture_name.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17819,
                        "charLength": 121
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->vendor_and_architecture_name + desc->vendor_name_size, <size of desc->vendor_and_architecture_name + desc->vendor_name_size>,  architecture_name.c_str(),  architecture_name.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fa89525d-a16c-4590-a0d1-d208f22cbcfa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 10,
                  "endLine": 148,
                  "endColumn": 61,
                  "charOffset": 4717,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(value, ModuleName.c_str(), ModuleName.size()",
                    "rendered": {
                      "text": "memcpy(value, ModuleName.c_str(), ModuleName.size()",
                      "markdown": "`memcpy(value, ModuleName.c_str(), ModuleName.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4717,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  ModuleName.c_str(),  ModuleName.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e844d2c1-3bfb-4c15-8098-9a28b2fc0d36",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 6,
                  "endLine": 540,
                  "endColumn": 90,
                  "charOffset": 17722,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()",
                    "rendered": {
                      "text": "memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()",
                      "markdown": "`memcpy(desc->vendor_and_architecture_name, vendor_name.c_str(), vendor_name.length()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17722,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(desc->vendor_and_architecture_name, <size of desc->vendor_and_architecture_name>,  vendor_name.c_str(),  vendor_name.length()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-87139833-6e0b-4c7d-ae0e-d947e19f8c2c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 10,
                  "endLine": 138,
                  "endColumn": 61,
                  "charOffset": 4337,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(value, SymbolName.c_str(), SymbolName.size()",
                    "rendered": {
                      "text": "memcpy(value, SymbolName.c_str(), SymbolName.size()",
                      "markdown": "`memcpy(value, SymbolName.c_str(), SymbolName.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_hsa_code.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4337,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value, <size of value>,  SymbolName.c_str(),  SymbolName.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-98345a7c-a2d4-4f9e-8238-bfd3bb9b0468",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 23,
                  "endLine": 1072,
                  "endColumn": 40,
                  "charOffset": 35502,
                  "charLength": 17,
                  "snippet": {
                    "text": "strlen(pStrValue)",
                    "rendered": {
                      "text": "strlen(pStrValue)",
                      "markdown": "`strlen(pStrValue)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35502,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strlen_s(pStrValue, <size of pStrValue>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35502,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strnlen(pStrValue, <size of pStrValue>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-09ac4ed6-2f8b-4f11-928b-03b172990dc5",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 968,
                  "startColumn": 4,
                  "endLine": 968,
                  "endColumn": 50,
                  "charOffset": 31562,
                  "charLength": 46,
                  "snippet": {
                    "text": "strncat(pDst, pSrc, (sizeDst - dstLength - 1))",
                    "rendered": {
                      "text": "strncat(pDst, pSrc, (sizeDst - dstLength - 1))",
                      "markdown": "`strncat(pDst, pSrc, (sizeDst - dstLength - 1))`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncat adds the null terminator at character 'n + 1', rather than at the nth character. this frequently leads to the null terminator being added in the memory adjacent to the destination buffer, rather than in the destination buffer."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 31562,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "strcat_s(pDst,  (sizeDst - dstLength - 1,  pSrc)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncat adds the null terminator at character 'n + 1', rather than at the nth character. this frequently leads to the null terminator being added in the memory adjacent to the destination buffer, rather than in the destination buffer."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 31562,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "strlcat(pDst,  pSrc,  (sizeDst - dstLength - 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-35a1f0b5-c1a8-4f68-9d51-f80284238b55",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 29,
                  "endLine": 967,
                  "endColumn": 41,
                  "charOffset": 31544,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pDst)",
                    "rendered": {
                      "text": "strlen(pDst)",
                      "markdown": "`strlen(pDst)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 31544,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pDst, <size of pDst>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 31544,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pDst, <size of pDst>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7c20da69-9fa3-4514-a157-aaf56ce6a316",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 918,
                  "startColumn": 8,
                  "endLine": 918,
                  "endColumn": 42,
                  "charOffset": 29902,
                  "charLength": 34,
                  "snippet": {
                    "text": "strncpy(pDst, pSrc, (dstSize - 1))",
                    "rendered": {
                      "text": "strncpy(pDst, pSrc, (dstSize - 1))",
                      "markdown": "`strncpy(pDst, pSrc, (dstSize - 1))`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29902,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strcpy_s(pDst,  (dstSize - 1,  pSrc)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29902,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strlcpy(pDst,  pSrc,  (dstSize - 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c0e9cdd8-f53e-4367-a2c2-5744760a79c2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                },
                "region": {
                  "startLine": 910,
                  "startColumn": 14,
                  "endLine": 910,
                  "endColumn": 26,
                  "charOffset": 29664,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(pSrc)",
                    "rendered": {
                      "text": "strlen(pSrc)",
                      "markdown": "`strlen(pSrc)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29664,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(pSrc, <size of pSrc>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/pal/inc/util/palInlineFuncs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29664,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(pSrc, <size of pSrc>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-68b5db18-3686-4146-ada6-3f6d96f92517",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1548,
                  "startColumn": 8,
                  "endLine": 1548,
                  "endColumn": 39,
                  "charOffset": 55012,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(buf, buffer, bufferSize)",
                    "rendered": {
                      "text": "memcpy(buf, buffer, bufferSize)",
                      "markdown": "`memcpy(buf, buffer, bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 55012,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buf, <size of buf>,  buffer,  bufferSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fe3c0f78-5a55-4c63-b1b2-18f7f26945c0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1536,
                  "startColumn": 8,
                  "endLine": 1536,
                  "endColumn": 40,
                  "charOffset": 54707,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(*buf, buffer, bufferSize)",
                    "rendered": {
                      "text": "memcpy(*buf, buffer, bufferSize)",
                      "markdown": "`memcpy(*buf, buffer, bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54707,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(*buf, <size of *buf>,  buffer,  bufferSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8dc6443e-13fa-4e94-95b3-29ffe93f7cb0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 1535,
                  "startColumn": 15,
                  "endLine": 1535,
                  "endColumn": 33,
                  "charOffset": 54679,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(bufferSize)",
                    "rendered": {
                      "text": "malloc(bufferSize)",
                      "markdown": "`malloc(bufferSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54679,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-558d7626-4043-409c-ba8d-279973451f55",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 998,
                  "startColumn": 10,
                  "endLine": 998,
                  "endColumn": 76,
                  "charOffset": 37537,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)",
                    "rendered": {
                      "text": "memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)",
                      "markdown": "`memcpy(dest, (const char*) edata->d_buf + offset - coffset, csize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 37537,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  (const char*) edata->d_buf + offset - coffset,  csize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c67ba312-6acc-4e4d-8162-43015ba825cd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 22,
                  "endLine": 266,
                  "endColumn": 35,
                  "charOffset": 8119,
                  "charLength": 13,
                  "snippet": {
                    "text": "malloc(size1)",
                    "rendered": {
                      "text": "malloc(size1)",
                      "markdown": "`malloc(size1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "20250722a/sc/HSAIL/ext/libamdhsacode/amd_elf_image.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8119,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}